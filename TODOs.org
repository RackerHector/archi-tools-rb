* ArchiMate Tools TODO

** SVG Rendering

*** DONE skip bendpoints inside source or target
    CLOSED: [2017-02-01 Wed 12:41]
*** DONE badges for device, node, service (cosmetic)
    CLOSED: [2017-02-01 Wed 12:41]
*** DONE trim space around diagram names (cosmetic)
    CLOSED: [2017-02-01 Wed 12:42]
*** DONE badge position updates (cosmetic, legibility)
    CLOSED: [2017-02-01 Wed 12:42]
*** DONE badge updates (cosmetic)
    CLOSED: [2017-02-01 Wed 12:42]
*** DONE verify junctions
    CLOSED: [2017-02-01 Wed 12:42]
*** DONE alternate figures (curved vs box & badge) selected by type="1" on Child (legibility)
    CLOSED: [2017-02-01 Wed 12:42]
*** DONE text bounds in entities (cosmetic, legibility)
    CLOSED: [2017-02-01 Wed 12:42]
*** DONE badge spacer settings (cosmetic, legibility) - artifact needs work.
    CLOSED: [2017-02-01 Wed 12:42]
*** TODO text on lines (cosmetic, legibility)
*** TODO bendpoint curves (cosmetic)
*** TODO line crossing hops (cosmetic)
*** DONE refactor
    CLOSED: [2017-02-01 Wed 12:42]

** Performance

*** TODO Look into using Celluloid and/or jruby to improve performance
          Thinking about concurrency for performance improvements

          read base
          read local
          read remote

          base + local -> diff l
          base + remote -> diff b

          diff l + diff b -> conflict detection

          cd -> each conflict type

          conflicts -> conflict resolution

          cr (user response)

          serialize result (single)


** Diff/Merge

*** Conflicts can happen on the same diff 2x. How to handle this?
*** DONE In `Change.to_s` - deref args that point to other elements (like archimate_element)
    CLOSED: [2017-02-01 Wed 12:48]
*** In Diagram children diffs - make to_s reference the parent diagram
*** DONE Array diffs on non-id'd diffable elements should detect changes rather than delete/insert
    CLOSED: [2017-02-01 Wed 12:48]
*** Archi file could have ids that conflict (i.e. 2 relationships with same id - this is bad!!! Was it a bad merge or something worse)
*** Implement check for de-duplicated merges
*** DONE Add a summary diff - elements added/changed/deleted, diagrams
    CLOSED: [2017-02-01 Wed 12:48]

** Lint

*** DONE Basic Lint features (matching Archi)
    CLOSED: [2017-02-01 Wed 12:49]
*** TODO Scorecard lint

** File Formats & Exports

*** TODO Convert support for
**** TODO Rdf
**** TODO Gremlin
**** DONE Neo4j CSV
     CLOSED: [2017-02-01 Wed 13:04]
**** DONE Cypher
     CLOSED: [2017-02-01 Wed 13:04]
**** DONE N-Quad
     CLOSED: [2017-02-01 Wed 13:04]
**** DONE GraphML
     CLOSED: [2017-02-01 Wed 13:04]

** DSL

*** TODO CLI DSL
*** TODO DSL for relationships
    # type                        from               to
    "AssociationRelationship",    "associated_with", "associated_with"
    "AccessRelationship",         "accesses",        "accessed_by"
    "UsedByRelationship",         "used_by",         "uses"
    "RealisationRelationship",    "realizes",        "realized_by"
    "AssignmentRelationship",     ""
    "AggregationRelationship"
    "CompositionRelationship"
    "FlowRelationship"
    "TriggeringRelationship"
    "GroupingRelationship"
    "SpecialisationRelationship"
    "InfluenceRelationship"

    # attributes that are references to other nodes in the model

    For any of these inserted or changed...

    * Property.key (only after PropertyDefs is introduced)
      - Property referenced deleted key
    * Child.target_connections -> Array of Connection ids
      - Connection.id deleted
    * Child.archimate_element -> Element.id
      - Element.id deleted
    * Folder.items -> Array of IdentifiedNode
      - *.id deleted
    * Relationship.source -> Element.id
      - Element.id deleted
    * Relationship.target -> Element.id
      - Element.id deleted
    * Connection.source -> Child.id
      - Child.id deleted
    * Connection.target -> Child.id
      - Child.id deleted
    * Connection.relationship -> Relationship.id
      - Relationship.id deleted


** Additional Features

*** TODO Add Split file feature (extract say a diagram or set of elements)
*** TODO Merge unrelated files (this is the intent of Merger)
*** TODO Add a super strict mode to note when reader finds unexpected content
*** DONE Stats (elements, relationships, diagrams)
    CLOSED: [2017-02-01 Wed 12:45]
*** TODO Tool to query for dependencies
*** TODO Tool to assign/validate/enforce metadata

** Code Quality/Refactoring

*** TODO Consider breaking this into a number of gems (for example: base lib, diff/merge, other cmdline tools)
*** TODO Consider making classes for each element and relationship type?
*** DONE Figure out how to make rmagick optional and/or remove rmagick dependency
    CLOSED: [2017-02-01 Wed 12:45]
*** TODO Data model items that reference something else by id should have the actual object available - not just the id
*** DONE Convert all CLIs to use AIO - merge with OutputIO and MaybeIO (maybe)
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE figure out a better parent mechanism - it's really not fully cooked
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE remove parent_id from dry::struct objects - then can use class schema instead of comparison attributes
    CLOSED: [2017-02-01 Wed 12:45]
*** TODO Not handling sketch diagram model in archi
*** DONE Use one color method - currently using HighLine and Colorize
    CLOSED: [2017-02-01 Wed 12:45]
*** TODO Refactor merge to pull conflict detection out
*** DONE Clean up the way that the describe is done on data model
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE Permit model items to link back to their parent
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE Should be a master hash index of id to object in Model
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE Improve description of diffs for conflict display
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE Eliminate use of Document in favor of Model
    CLOSED: [2017-02-01 Wed 12:45]
    - [X] cli/archi.rb
    - [X] cli/cleanup.rb
    - [X] cli/convert.rb
    - [X] cli/svger.rb
*** TODO Experiment with Ox, Oga, Sax-Machine for better performance on convert
*** TODO Map conversion between archi and archimate diagram formats
*** DONE Write a common clone for dry-struct classes
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE Make a format agnostic file reader (which delegates to appropriate file type readers)
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE Decide between ox and nokogiri and eliminate the alternate
    CLOSED: [2017-02-01 Wed 12:45]
*** DONE See what can be done about performance
    CLOSED: [2017-02-01 Wed 12:46]
     - Reading file 11-12 secs
     - deleted relationships referenced in diagrams is slow
*** DONE Refactor to better OO design where necessary (see all about names below)
    CLOSED: [2017-02-01 Wed 12:46]
*** DONE Refactor merge to pull apply diffs out
    CLOSED: [2017-02-01 Wed 12:46]
*** TODO Refactor Bendpoint to use a point (rather than Archi start/end points).
*** TODO Refactor DataModel classes to use enumeration classes for appropriate values
*** TODO Add a test to produce SVG output for the "everything.archimate" file
*** TODO Add a test to produce a badges diagram


* Refactor of data model for diff/merge purposes

** Validation
*** Identifiable objects exist one place in model
*** 
** Join:
   - Organizable Id (An Organizable is an Identifiable that can be contained in a Folder
   - Folder
   - Position in Folder - index isn't good here ... should that position really be a linked list?
* Introduce the idea of archimate modules
  - Allow creation of a focused model by including archimate modules - which are self-contained packages of elements and relationships
  - Allow inheritance of a module to permit showing changes to an existing model.
** How to implement?
   - Break things down automatically?
   - By Layer?
   - How to Deal with relationships across module boundaries?
* Need to have model merge capability
* TODO Refactor to use a Decorator approach using SimpleDelegator
* TODO Remove Dry-Types dependency
* TODO Scan git history and inject metadata for concepts created by git author
* Changes for v3 have borked the model
** TODO Push through fixes focusing on the issues from factories to see if that works
** TODO Refactor model to eliminate a lot of cruft by removing things like in_model= and populating model with objects instead of ID refs
** TODO Refactor model to improve the diffing of arrays and by writing explicit diff decorators rather than domain model magic
   Both of the last two options risk breaking diffing/merging by making and becoming a long slog

* TODO In mergetool - show diagrams that reference elements and relationships in diff conflicts

* Notes

Generic type - not used directly
ReferenceType <xs:attribute name="ref" type="xs:IDREF

ElementRefGroup <xs:attribute name="elementRef" type="xs:IDREF
RelationshipRefGroup <xs:attribute name="relationshipRef" type="xs:IDREF
ConceptRefGroup <xs:attribute name="ConceptRef" type="xs:IDREF
PropertyDefinitionRefGroup <xs:attribute name="propertyDefinitionRef" type="xs:IDREF
StereotypeRefGroup <xs:attribute name="stereotypeRef" type="xs:IDREF
PropertyDefinitionRefAttributeGroup <xs:attribute name="propertyDefinitionRef" type="xs:IDREF

RelationshipType <xs:attribute name="source" type="xs:IDREF
RelationshipType <xs:attribute name="target" type="xs:IDREF

OrganizationType        <xs:attribute name="identifierRef" type="xs:IDREF


RelationshipType.source -> ConceptType?
RelationshipType.target -> ConceptType?
ViewType.viewpointRef -> Viewpoint

Label.conceptRef -> ConceptType
Element (Diagram).elementRef -> ElementType
ConnectionType.source -> ConceptType
ConnectionType.target -> ConceptType
Relationship (Diagram).relationshipRef -> RelationshipType


ModelType
PropertyDefinitionType
ConceptType > [RelationshipType > Access, Influence], ElementType > RealElementType, RelationshipConnectorType, CompositeType
ViewType > Diagram


ViewConceptType > [ViewNodeType > Label, Container], [ConnectionType  > Line, SourcedConnectionType > Relationship > NestingRelationship]
Child is a ViewNodeType



ViewpointType

* More Notes

background_class -> used by entity_shape
badge -> entity_badge -> to_svg
entity_shape


text_bounds (I think this is only set in entity_shape)
DiagramModelReference assigns the entity from the child.model_element
badge_bounds in Gap, MotivationEntity, RectEntity, RoundedRectEntity
text_align in Note

some shapes are dependent on child.child_type

badge should be controlled by the entity_shape method
  check that badge_bounds is set by shape (I think it is)

text_bounds is controlled by entity_shape

background_class : string (default: layer_background_class)
badge : string option
entity_shape : (child -> element_name_type -> bounds -> Svg.elt wrap)
effective_entity : (child -> element_name_type)

get effective entity

that's used to match the rest:

Intermittent Failure with test --seed 11297

---

Remove Id references in preference to object references

Done:

Property (PropertyDefinitionId)

TODO:

Relationship (Source & Target)
View (Viewpoint)

Connection (For Source & Targets)
Label (Not Currently Used)
ViewConcept (View {Concept} list)
ViewNode (model, targetConnections, archimateNode)

---

Part of Better Diff/Merge redux

What about the path? Need a way to describe diffs & conflicts back to meaningful user world terms. (not id oriented)

Eliminate the use of DiffableArray by making a class for collections
Eliminate the use of Diffable Primitive with a smarter context diff

Referenceable Object Instance Classes

Archimate::DataModel::Model < Archimate::DataModel::NamedReferenceable
Archimate::DataModel::PropertyDefinition < Archimate::DataModel::NamedReferenceable,
Archimate::DataModel::Element < Archimate::DataModel::Concept,
Archimate::DataModel::Relationship < Archimate::DataModel::Concept,
Archimate::DataModel::Diagram < Archimate::DataModel::View,
  Archimate::DataModel::ViewNode < Archimate::DataModel::Referenceable,
  Archimate::DataModel::Connection < Archimate::DataModel::Referenceable,

What are the non-referenceable things that might be included by a less automated diff?

Model
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String - TODO: need to handle US/UK spelling differences and naming differences between Archi/ArchiMate2.1/ArchiMate3
  properties
  metadata
  elements
  relationships
  organizations
  property_definitions
  version
  diagrams
  viewpoints
  filename
  file_format
  archimate_version
  namespaces
  schema_locations

PropertyDefinition
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String
  (from PropertyDefinition)
  value_type (DataType)

Element
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String
  properties (from Concept)

Relationship
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String
  source
  target
  access_type

Diagram
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String
  (from View)
  properties
  viewpoint_type
  viewpoint
  (from Diagram)
  nodes (ViewNode collection)
  connection_router_type (int - enum, Archi only)
  background (int Archi only)
  connections (Connection Collection)

ViewNode
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String
  model: (identifier - what is this? Archi Only)
  content: string
  target_connections: (Archi only, identifiers, collection of ids of targets, TODO, probably not needed)
  archimate_element (Element)
  bounds
  nodes: (ViewNode collection)
  connections (Connection collection)
  style
  type
  child_type: (TODO: int this selects the shape of the object)
  properties

There are some sub-classes here that might be valuable to implement?
Connection
  (from Referenceable)
  id
  name
  documentation: Array of LangString - really should be a LangString type (I believe)
  type: String
  source_attachment (Location)
  bendpoints
  target_attachment (Location)
  source
  target
  relationship
  style
  properties

What about Organizations - they are horrifically defined in ArchiMate 3. Need an internal model that isn't so insane and is diffable/mergable.

---

Diff implementation

The refinements implementation is hokey. A lot of code and makes thing fragile.

Diff calculation

In most collections (except ones under diagram), the order of items doesn't matter - except it helps make textual diffs of models smaller.

insert and delete are probably only useful for collections

change is typical

how would move be implemented (i.e. move between collections)
What's the best data structure for collections to make diffs and merges easier? Diff lcs?

validation on demand rather than at creation of data model in absence of dry-struct? Switchable by global setting?

How would we add archimate modules (new concept)? privacy? Timeline? Transitional architectures?

---

Diff

- [ ] User friendly text description
- [ ] User friendly description includes location information in the model (I.e diagram it's located in, elements describing relationship, and so on)
- [ ] Diffs can be compared to see if they are in conflict
- [ ] Diff can be applied to a model to patch model

* TODO Eliminate Documentation class - it's a LangString
* TODO Make LangString be like a Hash with lang as key and string as value
* TODO Make LangString use a default lang (stored in Archimate module)

---

Strict::Array.member(AnyAttribute).default([])
Strict::Array.member(AnyElement).default([])
Strict::Array.member(Concern).default([])
Strict::Array.member(Connection).default([])
Strict::Array.member(Diagram).default([])
Strict::Array.member(Element).default([])
Strict::Array.member(ElementType).default([])
Strict::Array.member(LangString)
Strict::Array.member(Location).default([])
Strict::Array.member(ModelingNote).default([])
Strict::Array.member(Organization).default([])
Strict::Array.member(Property).default([])
Strict::Array.member(PropertyDefinition).default([])
Strict::Array.member(Referenceable).default([])
Strict::Array.member(Relationship).default([])
Strict::Array.member(RelationshipType).default([])
Strict::Array.member(SchemaInfo).default([])
Strict::Array.member(Strict::String).default([])
Strict::Array.member(ViewNode).default([])
Strict::Array.member(Viewpoint).default([])
Strict::Array.member(ViewpointContentEnum).default([])
Strict::Array.member(ViewpointPurposeEnum).default([])

---

Use locale for LangString
IRB::Locale.new.lang

---

referenced_identified_nodes
Model->

Diagram
  ViewNode
    Container
  Connection
Element (Property->PropertyDefinition)
Organization
Relationship

